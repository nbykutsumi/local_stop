{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pylab as pl\n",
    "import matplotlib.gridspec as gridspec\n",
    "from glob import glob\n",
    "import tensorflow as tf\n",
    "import numpy.ma as ma\n",
    "import sys,os\n",
    "from datetime import datetime, timedelta\n",
    "import myfunc.util as util\n",
    "from collections import deque\n",
    "from sklearn.decomposition import PCA\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Define functions\n",
      "(179239, 273) (179239, 21) (179239,)\n"
     ]
    }
   ],
   "source": [
    "def mk_daylist(days=None, rat_train=1.0):\n",
    "    nall   = days\n",
    "    ntrain = int(nall*rat_train)\n",
    "    np.random.seed(0)\n",
    "\n",
    "    a1idx = range(nall)\n",
    "    a1idx = np.random.choice(a1idx, len(a1idx), replace=False)\n",
    "    a1idx_train = a1idx[:ntrain]\n",
    "    a1idx_valid = a1idx[ntrain:]\n",
    "\n",
    "    return a1idx_train,a1idx_valid\n",
    "\n",
    "\n",
    "def read_Tc(lDTime=None, ldydx=None, isurf=None):\n",
    "    a2tc = deque([])\n",
    "    for DTime in lDTime:\n",
    "        Year,Mon,Day = DTime.timetuple()[:3]\n",
    "        a2tcTmp = None\n",
    "        for idydx,(dy,dx) in enumerate(ldydx):\n",
    "            #srcDir = '/work/hk01/utsumi/PMM/stop/data/Tc/%04d/%02d/%02d'%(Year,Mon,Day)\n",
    "            srcDir = '/mnt/j/PMM/stop/data/Tc/%04d/%02d/%02d'%(Year,Mon,Day)\n",
    "            srcPath1=srcDir + '/Tc1.%ddy.%ddx.%02dsurf.npy'%(dy,dx,isurf)\n",
    "            srcPath2=srcDir + '/Tc2.%ddy.%ddx.%02dsurf.npy'%(dy,dx,isurf)\n",
    "            if not os.path.exists(srcPath1): continue\n",
    "            atc1 = np.load(srcPath1)\n",
    "            atc2 = np.load(srcPath2)\n",
    "            atc  = np.c_[atc1, atc2]\n",
    "\n",
    "            try:\n",
    "                a2tcTmp = np.c_[a2tcTmp, atc]\n",
    "            except ValueError:\n",
    "                a2tcTmp = atc\n",
    "\n",
    "        if a2tcTmp is None:\n",
    "            continue\n",
    "        else:\n",
    "            a2tcTmp = np.array(a2tcTmp)\n",
    "        #**********************\n",
    "        a2tc.extend(a2tcTmp)\n",
    "\n",
    "    return np.array(a2tc)\n",
    "\n",
    "def read_var_collect(varName=None, lDTime=None, ldydx=None, isurf=None):\n",
    "    a2var = deque([])\n",
    "    for DTime in lDTime:\n",
    "        Year,Mon,Day = DTime.timetuple()[:3]\n",
    "        a2varTmp = None\n",
    "        for idydx,(dy,dx) in enumerate(ldydx):\n",
    "            #srcDir = '/work/hk01/utsumi/PMM/stop/data/Tc/%04d/%02d/%02d'%(Year,Mon,Day)\n",
    "            srcDir = '/mnt/j/PMM/stop/data/%s/%04d/%02d/%02d'%(varName,Year,Mon,Day)\n",
    "            srcPath=srcDir + '/%s.%ddy.%ddx.%02dsurf.npy'%(varName,dy,dx,isurf)\n",
    "            if not os.path.exists(srcPath): continue\n",
    "            avar = np.load(srcPath)\n",
    "\n",
    "            try:\n",
    "                a2varTmp = np.c_[a2varTmp, avar]\n",
    "            except ValueError:\n",
    "                a2varTmp = avar\n",
    "\n",
    "        if a2varTmp is None:\n",
    "            continue\n",
    "        else:\n",
    "            a2varTmp = np.array(a2varTmp)\n",
    "        #**********************\n",
    "        a2var.extend(a2varTmp)\n",
    "    return np.array(a2var)\n",
    "\n",
    "def read_pc_coef(isurf):\n",
    "    #*********************************\n",
    "    # Read PC coefficient\n",
    "    #*********************************\n",
    "    #coefDir = '/work/hk01/utsumi/PMM/stop/data/coef'\n",
    "    coefDir = '/mnt/j/PMM/stop/data/coef'\n",
    "    egvecPath = coefDir + '/egvec.%02dch.%03dpix.%02dsurf.npy'%(ntc1+ntc2, len(ldydx),isurf)\n",
    "    egvalPath = coefDir + '/egval.%02dch.%03dpix.%02dsurf.npy'%(ntc1+ntc2, len(ldydx),isurf)\n",
    "    varratioPath = coefDir + '/varratio.%02dch.%03dpix.%02dsurf.npy'%(ntc1+ntc2, len(ldydx),isurf)\n",
    "    \n",
    "    a2egvec = np.load(egvecPath)  # (n-th, ncomb)\n",
    "    a1varratio = np.load(varratioPath)\n",
    "    a1cumvarratio= np.cumsum(a1varratio)\n",
    "    return a2egvec, a1varratio, a1cumvarratio\n",
    "\n",
    "def my_unit(x,Min,Max):\n",
    "    return (x-Min)/(Max-Min)\n",
    "\n",
    "\n",
    "print 'Define functions'\n",
    "\n",
    "ldy   = [-1,0,1]\n",
    "ldx   = [-3,-2,-1,0,1,2,3]\n",
    "#ldx   = [-2,-1,0,1,2]\n",
    "imid  = int((len(ldy)*len(ldx)-1)/2)\n",
    "ldydx = [[dy,dx] for dy in ldy for dx in ldx]\n",
    "isurf = 1\n",
    "ldays_train,ldays_valid = mk_daylist(days=31, rat_train=0.2)\n",
    "lDTime_train = [datetime(2017,1,1)+timedelta(days=i) for i in ldays_train]\n",
    "lDTime_valid = [datetime(2017,1,1)+timedelta(days=i) for i in ldays_valid]\n",
    "\n",
    "\n",
    "trainTc   = read_Tc(lDTime_train, ldydx, isurf)\n",
    "trainStop = read_var_collect('stop', lDTime_train, ldydx, isurf)\n",
    "trainLat  = read_var_collect('Latitude', lDTime_train, [[0,0]], isurf)\n",
    "\n",
    "print trainTc.shape, trainStop.shape, trainLat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75874\n",
      "(75874, 273) (75874, 21) (75874,)\n"
     ]
    }
   ],
   "source": [
    "#latmin = -30\n",
    "#latmax = 30\n",
    "latmin=-90\n",
    "latmax=-20\n",
    "\n",
    "index_keep = []\n",
    "for i in range(trainTc.shape[0]):\n",
    "    lat = trainLat[i]\n",
    "    if (latmin<=lat)and(lat<=latmax):\n",
    "        index_keep.append(i)\n",
    "print len(index_keep)\n",
    "trainTc   = trainTc[index_keep]\n",
    "trainStop = trainStop[index_keep]\n",
    "trainLat  = trainLat[index_keep]\n",
    "print trainTc.shape, trainStop.shape, trainLat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(75874, 273) [[1506.4084]\n",
      " [1671.7852]\n",
      " [2204.2183]\n",
      " ...\n",
      " [2432.14  ]\n",
      " [1643.8267]\n",
      " [1565.1613]]\n"
     ]
    }
   ],
   "source": [
    "nstorm = 1\n",
    "#nstorm = 21\n",
    "nostorm = len(ldy)*len(ldx)-nstorm\n",
    "if nstorm >1:\n",
    "    a1flagstop = ((trainStop>=0).sum(axis=1) >=nstorm)\n",
    "    trainTc   = trainTc[a1flagstop]\n",
    "    trainStop = trainStop[a1flagstop]\n",
    "trainTc.shape, trainStop.shape\n",
    "trainStop = trainStop[:,imid].reshape(-1,1)\n",
    "print trainTc.shape, trainStop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PC parameters\n",
    "restriction = 10\n",
    "#restriction = 20\n",
    "#amean = trainTc.mean(axis=0)\n",
    "#astd  = trainTc.std(axis=0)\n",
    "#pca = PCA(n_components=restriction)\n",
    "#pca.fit((trainTc-trainTc.mean(0))/trainTc.std(0))\n",
    "#a2egvec=pca.components_\n",
    "##a1egval=pca.explained_variance\n",
    "#a1varratio=pca.explained_variance_ratio_\n",
    "\n",
    "#*** preprocess parameters *******\n",
    "Mon=1\n",
    "preptype = 'nynx.%dx%d.isurf.%d.Mon.%d.Lat.%d.%d'%(len(ldy),len(ldx),isurf,Mon,latmin,latmax)\n",
    "paramDir = '/mnt/j/PMM/stop/prep-param/%s'%(preptype)\n",
    "\n",
    "#*** Tc mean, std *******\n",
    "meanPath = paramDir + '/mean.Tc.npy'\n",
    "stdPath  = paramDir + '/std.Tc.npy'\n",
    "ameanTc = np.load(meanPath)\n",
    "astdTc  = np.load(stdPath)\n",
    "\n",
    "#*** PC coefficient (eigen vector)\n",
    "egvecPath = paramDir + '/egvec.npy'\n",
    "varratioPath = paramDir + '/varratio.npy'\n",
    "a2egvec   = np.load(egvecPath)\n",
    "a1varratio= np.load(varratioPath)\n",
    "\n",
    "#*** PC min, max ***************\n",
    "minPath = paramDir + '/pc.min.npy'\n",
    "maxPath = paramDir + '/pc.max.npy'\n",
    "MinPC   = np.load(minPath)\n",
    "MaxPC   = np.load(maxPath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(75874, 273) (75874, 1)\n"
     ]
    }
   ],
   "source": [
    "# resample\n",
    "resample_rate = 1.0\n",
    "N = int(trainTc.shape[0]*resample_rate)\n",
    "aidx = np.random.choice(np.arange(trainTc.shape[0]), N).astype('int32')\n",
    "trainTc  = trainTc[aidx,:]\n",
    "trainStop= trainStop[aidx,:]\n",
    "print trainTc.shape, trainStop.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainTc\n",
    "trainTc = (trainTc-ameanTc)/astdTc\n",
    "#reduction = np.dot(trainTc, a2egvec[:restriction,:].T)\n",
    "reduction = np.dot(trainTc, a2egvec[:restriction,:].T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-590.8039 1928.887\n"
     ]
    }
   ],
   "source": [
    "#Max = [ np.max(Glabel[i]) for i in range(14) ]\n",
    "#Min = [ np.min(Glabel[i]) for i in range(14) ]\n",
    "#Max =  np.max(trainStop)\n",
    "#Min =  np.min(trainStop)\n",
    "MinStop = 0\n",
    "MaxStop = 32000\n",
    "#MinRed, MaxRed = -590, 1929\n",
    "\n",
    "print reduction.min(),reduction.max()\n",
    "\n",
    "def unit(x):\n",
    "    return ( x - np.min(x,0) )/( np.max(x,0) - np.min(x,0) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(75874, 1)\n",
      "68286\n",
      "(75874, 10)\n",
      "[  -7.6241674 -311.9865    -590.8039      -4.838833    -6.9321785\n",
      "   -4.967272    -1.7738361   -6.125675    -1.6694157   -2.6868188]\n",
      "[1928.887      312.78076    655.85126     59.598923    24.301626\n",
      "    5.588452     3.46699      4.45609      6.349144     3.5090547]\n",
      "reduction= [[ 1.4946570e+00  3.0250823e-01 -7.6269859e-01 ... -5.5985558e-01\n",
      "  -2.1688482e-01 -1.5232746e-02]\n",
      " [-2.3158023e+00 -2.2444308e-02  5.5495542e-01 ...  9.5149338e-02\n",
      "  -1.8273526e-01 -3.0720171e-01]\n",
      " [ 2.0863867e+00  5.0003833e-01 -7.9606992e-01 ...  8.0103755e-02\n",
      "  -5.7830840e-02 -4.9700737e-03]\n",
      " ...\n",
      " [-1.2895434e+00 -5.3783357e-03  1.7230482e-01 ...  2.2756007e-01\n",
      "  -1.4739701e-01  1.9831875e-01]\n",
      " [-5.2720971e+00 -4.3868393e-01  1.5894618e+00 ...  2.5752592e-01\n",
      "   9.3388206e-01 -3.4726956e-01]\n",
      " [-3.6263227e-01  1.4391288e-01 -1.6575724e-01 ... -6.4598382e-02\n",
      "  -1.4573570e-01 -1.9713551e-01]]\n",
      "reduction.min, max -590.8039 1928.887\n",
      "trainX.min, max 0.0 1.0\n",
      "((68286, 10), (68286, 1), (7588, 10), (7588, 1))\n"
     ]
    }
   ],
   "source": [
    "aidx = np.random.choice(np.arange(len(trainStop)), len(trainStop))\n",
    "nTrain = int(len(aidx)*0.9)\n",
    "aidxTrain = aidx[:nTrain]\n",
    "aidxTest  = aidx[nTrain:]\n",
    "\n",
    "print trainStop.shape\n",
    "print nTrain\n",
    "print reduction.shape\n",
    "#trainX = unit(reduction)\n",
    "#trainY = unit(trainStop)\n",
    "trainX = my_unit(reduction,MinPC,MaxPC)\n",
    "#trainX = unit(reduction)\n",
    "trainY = my_unit(trainStop,MinStop,MaxStop)\n",
    "\n",
    "print MinPC\n",
    "print MaxPC\n",
    "print 'reduction=',reduction\n",
    "print 'reduction.min, max',reduction.min(), reduction.max()\n",
    "print 'trainX.min, max', trainX.min(), trainX.max()\n",
    "testX = trainX[aidxTest]\n",
    "testY = trainY[aidxTest]\n",
    "trainX= trainX[aidxTrain]\n",
    "trainY= trainY[aidxTrain]\n",
    "\n",
    "print(trainX.shape, trainY.shape, testX.shape, testY.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAD8CAYAAAB+UHOxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvIxREBQAAD7JJREFUeJzt3X+I5Hd9x/Hny9QI1RQjdwnp5dJN5QqNpY2yTQJCiVjjJUKiYCCBmiMNnC0Xqpg/PG0hYgikP1QqpMGzHiZgTVNUPMzV9Hookj+it5Frkss1ZI2pWe/InY1ES6jl4rt/7Hfj5G53Z/bXzOx+ng8YZuY9n5n9zJdjX/f58f1uqgpJUnteM+oOSJJGwwCQpEYZAJLUKANAkhplAEhSowwASWqUASBJjTIAJKlRBoAkNerXRt2BxWzatKkmJiZG3Q1JWlceffTRn1TV5n7txjoAJiYmmJqaGnU3JGldSfJfg7RzCkiSGmUASFKjDABJapQBIEmNMgAkqVEGgCQ1ygCQpEYZAJLUKANAkho11mcCr1cTux985fGzd71nhD2RpIU5ApCkRhkAktQoA0CSGmUASFKjDABJapQBIEmNchvoANzWKWkjcgQgSY0yACSpUQaAJDXKAJCkRhkAktQodwGtkt6dQpK0HjgCkKRGGQCS1Ki+AZBka5JvJTma5EiSD3X1TyT5cZLD3e2anvd8LMl0kqeSvLunvr2rTSfZvTZfSZI0iEHWAE4Bt1XV95OcAzya5ED32meq6u96Gye5BLgBeAvwm8C/J/md7uW7gXcBM8ChJPuq6snV+CKSpKXpGwBVdRw43j3+eZKjwJZF3nIdcH9V/QL4YZJp4LLutemqegYgyf1dWwNAkkZgSWsASSaAtwLf7Uq3Jnksyd4k53a1LcBzPW+b6WoL1SVJIzDwNtAkbwC+Any4qn6W5B7gDqC6+08BfwpknrcX84dNzfNzdgI7AS666KJBu7fqVmtbpxeSkzSuBhoBJHkts7/8v1RVXwWoquer6uWq+iXweX41zTMDbO15+4XAsUXqr1JVe6pqsqomN2/evNTvI0ka0CC7gAJ8AThaVZ/uqV/Q0+x9wBPd433ADUlel+RiYBvwPeAQsC3JxUnOZnaheN/qfA1J0lINMgX0duADwONJDne1jwM3JrmU2WmcZ4EPAlTVkSQPMLu4ewrYVVUvAyS5FXgIOAvYW1VHVvG7SJKWYJBdQA8z/7z+/kXecydw5zz1/Yu9T5I0PJ4JLEmNMgAkqVEGgCQ1ygCQpEYZAJLUKANAkhrlXwRbIi/tIGmjcAQgSY0yACSpUQaAJDXKAJCkRhkAktQodwH1WOofgVmtPxojSaPgCECSGmUASFKjDABJapQBIEmNchF4iLyMhKRx4ghAkhplAEhSowwASWqUASBJjTIAJKlR7gIaA+4OkjQKjgAkqVEGgCQ1ygCQpEYZAJLUKANAkhrVNwCSbE3yrSRHkxxJ8qGu/qYkB5I83d2f29WT5LNJppM8luRtPZ+1o2v/dJIda/e1JEn9DDICOAXcVlW/C1wB7EpyCbAbOFhV24CD3XOAq4Ft3W0ncA/MBgZwO3A5cBlw+1xoSJKGr+95AFV1HDjePf55kqPAFuA64Mqu2b3At4GPdvX7qqqAR5K8MckFXdsDVfUCQJIDwHbgy6v4fdYN/5ykpFFb0olgSSaAtwLfBc7vwoGqOp7kvK7ZFuC5nrfNdLWF6qf/jJ3Mjhy46KKLltK9DcGTwiQNy8ABkOQNwFeAD1fVz5Is2HSeWi1Sf3Whag+wB2BycvKM11fbOP9P3DCQtJYG2gWU5LXM/vL/UlV9tSs/303t0N2f6OozwNaet18IHFukLkkagUF2AQX4AnC0qj7d89I+YG4nzw7g6z31m7rdQFcAL3ZTRQ8BVyU5t1v8vaqraRVN7H7wlZskLWaQKaC3Ax8AHk9yuKt9HLgLeCDJLcCPgOu71/YD1wDTwEvAzQBV9UKSO4BDXbtPzi0Iqz+ngySttkF2AT3M/PP3AO+cp30Buxb4rL3A3qV0UJK0NjwTWJIaZQBIUqMMAElqlAEgSY0yACSpUQaAJDXKAJCkRhkAktSoJV0NdKPwMgmS1GgAbCSGmaTlcgpIkhplAEhSowwASWqUASBJjTIAJKlR7gLawPwjMpIWYwCsQ8vZ+mkYSDqdU0CS1CgDQJIaZQBIUqMMAElqlAEgSY0yACSpUW4DbZBbQiWBIwBJapYBIEmNMgAkqVEGgCQ1qm8AJNmb5ESSJ3pqn0jy4ySHu9s1Pa99LMl0kqeSvLunvr2rTSfZvfpfRSs1sfvBV26SNr5BRgBfBLbPU/9MVV3a3fYDJLkEuAF4S/eef0hyVpKzgLuBq4FLgBu7tpKkEem7DbSqvpNkYsDPuw64v6p+AfwwyTRwWffadFU9A5Dk/q7tk0vusSRpVazkPIBbk9wETAG3VdVPgS3AIz1tZroawHOn1S9fwc/WKnG6R2rXcheB7wHeDFwKHAc+1dUzT9tapH6GJDuTTCWZOnny5DK7J0nqZ1kBUFXPV9XLVfVL4PP8appnBtja0/RC4Ngi9fk+e09VTVbV5ObNm5fTPUnSAJYVAEku6Hn6PmBuh9A+4IYkr0tyMbAN+B5wCNiW5OIkZzO7ULxv+d2WJK1U3zWAJF8GrgQ2JZkBbgeuTHIps9M4zwIfBKiqI0keYHZx9xSwq6pe7j7nVuAh4Cxgb1UdWfVvI0ka2CC7gG6cp/yFRdrfCdw5T30/sH9JvZMkrRmvBqp5ecVQaePzUhCS1CgDQJIaZQBIUqNcA1BfrgdIG5MjAElqlAEgSY0yACSpUQaAJDXKAJCkRhkAktQoA0CSGmUASFKjDABJapQBIEmNMgAkqVEGgCQ1ygCQpEYZAJLUKANAkhplAEhSo/yDMFoS/ziMtHE4ApCkRhkAktQop4C0bE4HSeubIwBJapQjAK0KRwPS+uMIQJIa1TcAkuxNciLJEz21NyU5kOTp7v7crp4kn00yneSxJG/rec+Orv3TSXaszdeRJA1qkBHAF4Htp9V2AwerahtwsHsOcDWwrbvtBO6B2cAAbgcuBy4Dbp8LDUnSaPQNgKr6DvDCaeXrgHu7x/cC7+2p31ezHgHemOQC4N3Agap6oap+ChzgzFCRJA3RctcAzq+q4wDd/XldfQvwXE+7ma62UF2SNCKrvQiceWq1SP3MD0h2JplKMnXy5MlV7Zwk6VeWGwDPd1M7dPcnuvoMsLWn3YXAsUXqZ6iqPVU1WVWTmzdvXmb3JEn9LDcA9gFzO3l2AF/vqd/U7Qa6AnixmyJ6CLgqybnd4u9VXU0b0MTuB1+5SRpffU8ES/Jl4EpgU5IZZnfz3AU8kOQW4EfA9V3z/cA1wDTwEnAzQFW9kOQO4FDX7pNVdfrCsiRpiPoGQFXduMBL75ynbQG7FvicvcDeJfVOkrRmvBSE1pSXiJDGlwGgoTEMpPHitYAkqVEGgCQ1ygCQpEYZAJLUKANAkhrlLiCNhDuCpNFzBCBJjTIAJKlRBoAkNcoAkKRGuQiskVvostEuDktryxGAJDXKAJCkRhkAktQoA0CSGuUisMaWi8PS2nIEIEmNcgSgdcfrCEmrwxGAJDXKAJCkRhkAktQoA0CSGmUASFKjDABJapQBIEmNauY8gIXOKpWkVjkCkKRGrSgAkjyb5PEkh5NMdbU3JTmQ5Onu/tyuniSfTTKd5LEkb1uNLyBJWp7VGAG8o6ourarJ7vlu4GBVbQMOds8Brga2dbedwD2r8LMlScu0FmsA1wFXdo/vBb4NfLSr31dVBTyS5I1JLqiq42vQBzXC6wJJy7fSEUAB/5bk0SQ7u9r5c7/Uu/vzuvoW4Lme9850tVdJsjPJVJKpkydPrrB7kqSFrHQE8PaqOpbkPOBAkv9cpG3mqdUZhao9wB6AycnJM16XJK2OFY0AqupYd38C+BpwGfB8kgsAuvsTXfMZYGvP2y8Ejq3k50uSlm/ZAZDk9UnOmXsMXAU8AewDdnTNdgBf7x7vA27qdgNdAbzo/L8kjc5KpoDOB76WZO5z/qmqvpnkEPBAkluAHwHXd+33A9cA08BLwM0r+NnSGU4/2c9FYWlxyw6AqnoG+IN56v8NvHOeegG7lvvzJEmryzOBJalRBoAkNaqZi8GpbZ4wJp3JANCG5RVgpcU5BSRJjTIAJKlRBoAkNco1ADXHBWFpliMASWqUASBJjTIAJKlRrgFIHdcG1JoNHQCeCCRJC3MKSJIaZQBIUqM29BSQ1M9C04SuB6gFjgAkqVEGgCQ1yikgqQ+ng7RRGQDSKjAktB45BSRJjTIAJKlRTgFJS+BUjzYSA0BaJi81ovXOAJBW2ULB4IhB48Y1AElqlCMAaUgWWj9wXUGjYgBII+A1iDQOhh4ASbYDfw+cBfxjVd017D5I680gC84GhpZqqAGQ5CzgbuBdwAxwKMm+qnpymP2QNqJBdyUZFJoz7BHAZcB0VT0DkOR+4DrAAJBOs1bbTN2lpDnDDoAtwHM9z2eAy4fcB0nzWEngLDU8XOsYD8MOgMxTq1c1SHYCO7un/5PkqTXv1fjYBPxk1J0YYx6fhY302OSvR/PeJWjt385vDdJo2AEwA2zteX4hcKy3QVXtAfYMs1PjIslUVU2Ouh/jyuOzMI/N4jw+8xv2iWCHgG1JLk5yNnADsG/IfZAkMeQRQFWdSnIr8BCz20D3VtWRYfZBkjRr6OcBVNV+YP+wf+460eTU1xJ4fBbmsVmcx2ceqar+rSRJG44Xg5OkRhkAI5Bke5Knkkwn2T3P63+U5PtJTiV5/yj6OCoDHJuPJHkyyWNJDiYZaLvbRjHA8fmzJI8nOZzk4SSXjKKfo9Dv2PS0e3+SSuKuoKryNsQbs4vfPwB+Gzgb+A/gktPaTAC/D9wHvH/UfR6zY/MO4Ne7x38O/POo+z1mx+c3eh5fC3xz1P0el2PTtTsH+A7wCDA56n6P+uYIYPheuRxGVf0fMHc5jFdU1bNV9Rjwy1F0cIQGOTbfqqqXuqePMHsuSSsGOT4/63n6ek470XID63tsOncAfwP87zA7N64MgOGb73IYW0bUl3Gz1GNzC/Cva9qj8TLQ8UmyK8kPmP1F9xdD6tuo9T02Sd4KbK2qbwyzY+PMABi+vpfDaNjAxybJnwCTwN+uaY/Gy0DHp6rurqo3Ax8F/mrNezUeFj02SV4DfAa4bWg9WgcMgOHrezmMhg10bJL8MfCXwLVV9Ysh9W0cLPXfzv3Ae9e0R+Oj37E5B/g94NtJngWuAPa1vhBsAAyfl8NYWN9j0w3jP8fsL/8TI+jjKA1yfLb1PH0P8PQQ+zdKix6bqnqxqjZV1URVTTC7fnRtVU2NprvjwQAYsqo6BcxdDuMo8EBVHUnyySTXAiT5wyQzwPXA55I0cbmMQY4Ns1M+bwD+pdvq2Ex4Dnh8bk1yJMlh4CPAjhF1d6gGPDY6jWcCS1KjHAFIUqMMAElqlAEgSY0yACSpUQaAJDXKAJCkRhkAktQoA0CSGvX/YshrgZWdB0cAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pl.subplot(111)\n",
    "_,_,_ = pl.hist(trainY, 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def Figure(Label, Prediction, bins):\n",
    "    Min,Max = MinStop, MaxStop\n",
    "    recover_testY = (Max-Min)*Label.flatten()      + Min\n",
    "    recover_pred  = (Max-Min)*Prediction.flatten() + Min\n",
    "\n",
    "    pl.figure(figsize=(15,15))\n",
    "    gs = gridspec.GridSpec(2,2, width_ratios=[1,1], height_ratios=[1,1])\n",
    "    \n",
    "    pl.subplot(gs[0,:])\n",
    "    pl.plot(recover_testY/1000., c='r', label ='Observation')\n",
    "    pl.plot(recover_pred /1000., c='b', label ='Prediction')\n",
    "    pl.ylabel('height(km)')\n",
    "    pl.ylim([0,18])\n",
    "    pl.legend()\n",
    "    pl.title('non-storm<=%d b=%d lat=[%.1f, %.1f] box=%dx%d'%(nostorm, bpara,latmin, latmax, len(ldy),len(ldx)))\n",
    "    print('RMSE:'     , np.round(rmse(Label, Prediction) , 4))\n",
    "    print('real RMSE:', np.round(Rmse(Label, Prediction) , 4))\n",
    "    print('CC:'       , np.round(  cc(Label, Prediction) , 4))\n",
    "    \n",
    "    pl.subplot(gs[2]) # values prediction and testY are between -4 and 4\n",
    "    aa = recover_pred\n",
    "    bb = recover_testY\n",
    "    interval           = np.array([ Min + (Max - Min)/bins*i for i in range(bins+1) ])\n",
    "    interval1          = np.array([ Min + (Max - Min)/bins*i for i in range(bins+1) ])\n",
    "    revised_interval   = interval[:-1]  + (Max - Min)/(2*bins)\n",
    "    revised_interval1  = interval1[:-1] + (Max - Min)/(2*bins)\n",
    "    cumulative_number  = []\n",
    "    cumulative_number1 = []\n",
    "    for i in range(bins):\n",
    "        cumulative_number.append(  (aa < interval[i+1] ).sum() - (aa < interval[i] ).sum() )\n",
    "        cumulative_number1.append( (bb < interval1[i+1]).sum() - (bb < interval1[i]).sum() )\n",
    "    pl.plot(revised_interval/.1000          , cumulative_number   , color='green', alpha=0.5, label='Prediction')    \n",
    "    pl.fill_between(revised_interval/.1000  , cumulative_number, 0, color='green', alpha=0.5)\n",
    "    pl.plot(revised_interval1/.1000         , cumulative_number1  , color='red'  , alpha=0.5 ,label='Observation')    \n",
    "    pl.fill_between(revised_interval1/.1000 ,cumulative_number1, 0, color='red'  , alpha=0.5)\n",
    "    pl.ylabel('number of samples')\n",
    "    pl.xlabel('height(km)')\n",
    "    pl.legend() \n",
    "    pl.title('Distribution')\n",
    "    pl.legend()\n",
    "\n",
    "    #*** 2D histogram **********\n",
    "    H,xbnd,ybnd = np.histogram2d(recover_testY/1000, recover_pred/1000, bins=[np.arange(0,20,0.5), np.arange(0,20,0.5)])\n",
    "    H = ma.masked_equal(H,0)\n",
    "    X,Y = np.meshgrid(xbnd,ybnd)\n",
    "    pl.subplot(gs[3])\n",
    "    pl.pcolormesh(X,Y,H.T, cmap='jet')\n",
    "    pl.axis([0,18,0,18])\n",
    "    pl.xticks([0,5,10,15])\n",
    "    pl.yticks([0,5,10,15])\n",
    "    pl.plot([0,35],[0,35],'k')\n",
    "    pl.xlabel('Observation(km)')\n",
    "    pl.ylabel('Prediction(km)')\n",
    "    pl.title('Correlation')\n",
    "    pl.grid()\n",
    "    pl.colorbar()\n",
    "    \n",
    "    #pl.scatter(recover_testY/1000, recover_pred/1000,s=3)\n",
    "    #pl.plot(np.arange(18000)/1000,np.arange(18000)/1000,c='black',linestyle = ':')\n",
    "    #pl.axis([0,18,0,18])\n",
    "    #pl.xticks([0,5,10,15])\n",
    "    #pl.yticks([0,5,10,15])\n",
    "    #pl.xlabel('Observation(km)')\n",
    "    #pl.ylabel('Prediction(km)')\n",
    "    #pl.title('Correlation')\n",
    "    #pl.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "bpara  = 5\n",
    "degree = 12\n",
    "coef_b = bpara\n",
    "#coef_poly  = mk_coef_polyfit(testY, degree, coef_b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Apply error function\n",
    "##Train, Label = unit(reduction), unit(label)\n",
    "##ntrain       = int(0.7*len(reduction))\n",
    "#print(trainX.shape, trainY.shape, testX.shape, testY.shape)\n",
    "##dim = [trainX.shape[2], 30, 30, 30,10, trainY.shape[1]]\n",
    "#dim = [trainX.shape[1], 30, 30, 30,10, trainY.shape[1]]\n",
    "#act = 2\n",
    "#expr= 'surf%d.b%d.lat.%d.%d'%(isurf,bpara,latmin,latmax)\n",
    "#prediction   = FFN(trainX, trainY, testX, testY, 0.005, 50, 1024*4, dim, act)\n",
    "##prediction   = FFN(trainX, trainY, testX, testY, 0.005, 150, 1024*4, dim, act)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(7588, 10)\n",
      "INFO:tensorflow:Restoring parameters from /mnt/j/PMM/stop/ml-param/surf1.b5.lat.-90.-20/stop.01\n",
      "Tensor(\"input:0\", shape=(?, 10), dtype=float32)\n",
      "Tensor(\"pred:0\", shape=(?, 1), dtype=float32)\n",
      "(7588, 1)\n",
      "testX.min, max 0.0 1.0\n",
      "prediction.min(),max() 0.04385358 0.38043243\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#**** Checkpoints **********************\n",
    "expr= 'surf%d.b%d.lat.%d.%d'%(isurf,bpara,latmin,latmax)\n",
    "#ckptDir = '/work/hk01/utsumi/PMM/stop/ml-param-%d'%(act)\n",
    "ckptDir = '/mnt/j/PMM/stop/ml-param/%s'%(expr)\n",
    "ckptPath= ckptDir + '/stop.%02d'%(isurf)\n",
    "#******************************** \n",
    "print testX.shape\n",
    "with tf.Session() as sess:\n",
    "    saver = tf.train.import_meta_graph(ckptPath + '.meta')\n",
    "    saver.restore(sess, tf.train.latest_checkpoint(ckptDir + '/'))\n",
    "    graph = tf.get_default_graph()\n",
    "    X      = graph.get_tensor_by_name('input:0')\n",
    "    pred   = graph.get_tensor_by_name('pred:0')\n",
    "    print X\n",
    "    print pred\n",
    "    out    = sess.run(pred, feed_dict={X:testX})\n",
    "print out.shape\n",
    "prediction = out\n",
    "print 'testX.min, max', testX.min(), testX.max()\n",
    "print 'prediction.min(),max()',prediction.min(),prediction.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('RMSE:', 0.0341)\n",
      "('real RMSE:', 1090.6001)\n",
      "('CC:', 0.7698)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Figure(testY, prediction, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
